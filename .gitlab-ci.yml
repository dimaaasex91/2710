default:
  image: docker:20
  services:
    - name: docker:20-dind

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  LC_ALL: "en_US.UTF-8"
  LANG: "en_US.UTF-8"
  GIT_DEPTH: "5"

stages:
  - static_analysis
  - tests
  - build
  - push_image
  - deploy

.build_temlate: &build_template
  stage: build
  tags:
    - docker
  artifacts:
    when: always
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*
    exclude:
      - ./git/
      - ./git/**/*
      #- .gitlab-ci.yml
      - .gitignore
  #rules:
  #- if: '$CI_COMMIT_REF_NAME == "main"'
  #rules:
  #  - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
  
pylint:
  image: python:3.9
  stage: static_analysis
  tags:
    - docker
  allow_failure: true
  before_script:
    - python --version
    - python -m pip install --upgrade pip
    - pip install pylint
    - pip install -r python/requirements.txt
  script:
    # - pylint -d C0301,C0114 python/*.py
    - pylint python/*.py

tests_with_SQ:
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  stage: tests
  #needs: [pylint]
  tags:
    - docker
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"   # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  allow_failure: true
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    - main 

build_python:
  image: python:3.9
  <<: *build_template
  needs: [tests_with_SQ]
  before_script:
    - python --version
  script:
    - pip install pytest
    - pip install -r python/requirements.txt

build_docker_image:
  stage: build
  needs: [build_python]
  tags:
    - docker
  before_script: 
    - docker info
  script:
    - echo "build docker image"
    - docker build -t $CI_IMAGE_NAME:$CI_COMMIT_REF_SLUG ./python/
    - echo "build docker sucessfull"
    - docker tag $CI_IMAGE_NAME:$CI_COMMIT_REF_SLUG $CI_REGISTRY_NEXUS/$CI_IMAGE_NAME:$CI_COMMIT_REF_SLUG


push_docker_image:
  stage: push_image
  needs: [build_docker_image]
  tags:
    - docker
  before_script:
    - echo "start login to hub"
    #- echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY -u gitlab-ci-token --password-stdin   # FROM GITLAB
    #- echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER_NEXUS $CI_REGISTRY --password-stdin
    - docker login -u $CI_REGISTRY_USER_NEXUS -p $CI_REGISTRY_PASSWORD $CI_REGISTRY_NEXUS 
    - echo "login to hub is sucessfull"
  script:
    #- docker push $CI_REGISTRY_IMAGE_NEXUS:$CI_COMMIT_REF_SLUG # FROM GITLAB
    - docker push $CI_REGISTRY_NEXUS/$CI_IMAGE_NAME:$CI_COMMIT_REF_SLUG
  #only: [merge_requests]
  rules:
  - if: '$CI_COMMIT_REF_NAME == "main"'



# deploy_docker_image: ---
#   stage: deploy 
#   needs: [push_docker_image]
#   tags:
#     - docker
#   image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
#   variables:
#   TF_ROOT: ${CI_PROJECT_DIR}/environments/example/production
#   TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/example-production


# cache:
#   key: example-production
#   paths:
#     - ${TF_ROOT}/.terraform

# build_minio:
# stage: build
# image: minio/minio:latest
# tags:
#   - docker
# script:
#   - pip install -r python/requirements.txt
# artifacts:
#   when: always
#   name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
#   paths:
#     - ./*
#   exclude:
#     - ./git/**/*
#     - .gitlab-ci.yml
#     - .gitignore
# only:
#   - main